{"version":3,"sources":["App.tsx","index.tsx"],"names":["INITIAL_RADIAL_OFFSET","Math","PI","App","useTweaks","numCirclesPerGroup","value","min","max","step","circleGap","innerCircleRadius","numGroups","expansionFactor","showContainingCircle","rotate","rotationsPerSecond","useWindowSize","windowWidth","width","windowHeight","height","circles","group","radialOffset","i","radius","cosine","cos","sine","sin","cx","cy","push","stroke","strokeWidth","r","fillOpacity","containingCircleRadius","className","style","fill","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAKMA,EAAwBC,KAAKC,GAAK,EAwFzBC,MAtFf,WAsBE,IAtBc,IAAD,EAUTC,YAAU,CACZC,mBAAoB,CAAEC,MAAO,GAAIC,IAAK,EAAGC,IAAK,GAAIC,KAAM,GACxDC,UAAW,CAAEJ,MAAO,GAAIC,IAAK,GAAKC,IAAK,IACvCG,kBAAmB,CAAEL,MAAO,GAAIC,IAAK,EAAGC,IAAK,IAAKC,KAAM,GACxDG,UAAW,CAAEN,MAAO,EAAGC,IAAK,EAAGC,IAAK,GAAIC,KAAM,GAC9CI,gBAAiB,CAAEP,MAAO,EAAGC,IAAK,EAAGC,IAAK,GAC1CM,sBAAsB,EACtBC,QAAQ,EACRC,mBAAoB,CAAEV,MAAO,GAAKC,IAAK,IAAMC,IAAK,KAhBlDH,EAFW,EAEXA,mBACAK,EAHW,EAGXA,UACAC,EAJW,EAIXA,kBACAC,EALW,EAKXA,UACAC,EANW,EAMXA,gBACAC,EAPW,EAOXA,qBACAC,EARW,EAQXA,OACAC,EATW,EASXA,mBATW,EAoBwCC,cAAtCC,EApBF,EAoBLC,MAA4BC,EApBvB,EAoBeC,OACtBC,EAAuB,GACpBC,EAAQ,EAAGA,EAAQX,EAAWW,IAGrC,IAFA,IAAMC,EACJxB,EAAiC,EAARuB,EAAYtB,KAAKC,GAAMU,EACzCa,EAAI,EAAGA,EAAIpB,EAAoBoB,IAAK,CAC3C,IAAMC,EAASf,EAAoB,SAAAc,EAAKZ,GAAkBH,EACpDiB,EAAS1B,KAAK2B,IAAIJ,GAClBK,EAAO5B,KAAK6B,IAAIN,GAGhBO,EAAKb,EAAc,EAAIS,EAASD,GAFpBC,EAAShB,EAGrBqB,EAAKZ,EAAe,EAAIS,EAAOH,GAFnBG,EAAOlB,EAGzBW,EAAQW,KACN,wBAEEC,OAAO,OACPC,YAAa,EACbC,EAAGV,EACHK,GAAIA,EACJC,GAAIA,EACJK,YAAa,GANRd,EAAQlB,EAAqBoB,IAW1C,IAAMa,EACJ,SAACjC,EAAqB,EAAMQ,GAAkBH,EAAY,EAC1DC,EACF,OACE,sBAAK4B,UAAU,MAAf,UACE,sBACElB,OAAQD,EACRD,MAAOD,EACPqB,UAAWxB,EAAS,SAAW,GAC/ByB,MACE,CACE,gBAAgB,GAAhB,OAAoB,EAAIxB,EAAxB,MANN,UAUE,wBACEyB,KAAK,OACLL,EAAGzB,EACHoB,GAAIb,EAAc,EAClBc,GAAIZ,EAAe,IAEpBN,GACC,wBACEsB,EAAGE,EACHP,GAAIb,EAAc,EAClBc,GAAIZ,EAAe,EACnBc,OAAO,OACPC,YAAa,EACbE,YAAa,IAGhBf,KAEH,mBAAGoB,KAAK,oDAAR,0CCjFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2ab546f0.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport { useWindowSize } from 'react-use';\nimport { useTweaks } from 'use-tweaks';\nimport './App.css';\n\nconst INITIAL_RADIAL_OFFSET = Math.PI / 6;\n\nfunction App() {\n  const {\n    numCirclesPerGroup,\n    circleGap,\n    innerCircleRadius,\n    numGroups,\n    expansionFactor,\n    showContainingCircle,\n    rotate,\n    rotationsPerSecond, // rotations per second\n  } = useTweaks({\n    numCirclesPerGroup: { value: 12, min: 1, max: 40, step: 1 },\n    circleGap: { value: 12, min: 0.1, max: 30 },\n    innerCircleRadius: { value: 20, min: 1, max: 100, step: 1 },\n    numGroups: { value: 6, min: 2, max: 72, step: 1 },\n    expansionFactor: { value: 1, min: 1, max: 4 },\n    showContainingCircle: true,\n    rotate: false,\n    rotationsPerSecond: { value: 0.1, min: 0.01, max: 5 },\n  }) as any; // having to force any otherwise an error about \"does not exist on type\"\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  const circles: ReactNode[] = [];\n  for (let group = 0; group < numGroups; group++) {\n    const radialOffset =\n      INITIAL_RADIAL_OFFSET + (group * 2 * Math.PI) / numGroups;\n    for (let i = 0; i < numCirclesPerGroup; i++) {\n      const radius = innerCircleRadius + i ** expansionFactor * circleGap;\n      const cosine = Math.cos(radialOffset);\n      const sine = Math.sin(radialOffset);\n      const cxOffset = -cosine * innerCircleRadius;\n      const cyOffset = -sine * innerCircleRadius;\n      const cx = windowWidth / 2 + cosine * radius + cxOffset;\n      const cy = windowHeight / 2 + sine * radius + cyOffset;\n      circles.push(\n        <circle\n          key={group * numCirclesPerGroup + i}\n          stroke=\"#fff\"\n          strokeWidth={1}\n          r={radius}\n          cx={cx}\n          cy={cy}\n          fillOpacity={0}\n        ></circle>\n      );\n    }\n  }\n  const containingCircleRadius =\n    (numCirclesPerGroup - 1) ** expansionFactor * circleGap * 2 +\n    innerCircleRadius;\n  return (\n    <div className=\"App\">\n      <svg\n        height={windowHeight}\n        width={windowWidth}\n        className={rotate ? 'rotate' : ''}\n        style={\n          {\n            '--cycle-speed': `${1 / rotationsPerSecond}s`,\n          } as any\n        }\n      >\n        <circle\n          fill=\"#fff\"\n          r={innerCircleRadius}\n          cx={windowWidth / 2}\n          cy={windowHeight / 2}\n        ></circle>\n        {showContainingCircle && (\n          <circle\n            r={containingCircleRadius}\n            cx={windowWidth / 2}\n            cy={windowHeight / 2}\n            stroke=\"#fff\"\n            strokeWidth={1}\n            fillOpacity={0}\n          ></circle>\n        )}\n        {circles}\n      </svg>\n      <a href=\"https://github.com/lourd/generative-circles-study\">\n        Generative Circles Study\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}